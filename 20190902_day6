// [ 20190902 월요일 ]
// 문제 A0: [TST] 숫자 찾기 (★이진탐색★)
#if 0
#include <stdio.h>
#define MAX	(50010)
#define TAX	(10010)

void Input(void);
int B_Search(int s, int e, int num);

int N;
int T;
int ARR[MAX];
int ARR_T[TAX];

int main(void)
{
	int i;

	//freopen("in.txt", "r", stdin);
	Input();

	for (i = 1; i <= T; i++)
	{
		printf("%d\n", B_Search(1, N, ARR_T[i]));
	}

	return 0;
}


void Input(void)
{
	int i;

	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &ARR[i]);
	}

	scanf("%d", &T);
	for (i = 1; i <= T; i++)
	{
		scanf("%d", &ARR_T[i]);
	}
}

int B_Search(int s, int e, int num)
{
	int m;

	while (s <= e)
	{
		m = (s + e) / 2;
		if ( ARR[m] == num ) return m;
		if ( ARR[m] < num ) s = m + 1;
		else e = m - 1;
	}
	return 0;
}
#endif






// 문제 A1: [LAB]오름차순 정렬 (★머지소트★)
#if 0
#include <stdio.h>
#define MAX	(30000)

int N;
int a[MAX + 10];	// 정렬을 시킬 배열 -> 이후에 정렬된 데이터를 다시 받음!!
int b[MAX + 10];	// 정렬을 위해 활용하는 배열
int cnt;

void Merge_Sort(int s, int e);

int main(void)
{
	int i;

	freopen("in.txt", "r", stdin);

	// 입력받는 부분
	scanf("%d", &N);
	for (i = 0; i < N; i++)
	{
		scanf("%d", &a[i]);
	}

	Merge_Sort(0, N - 1);

	// 여기서부터 작성
	for (i = 0; i < N; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");

	return 0;
}

void Merge_Sort(int s, int e)
{
	int idx1, idx2, idx_b;
	int m = (s + e) / 2;

	if (s >= e) return;

	Merge_Sort(s, m);
	Merge_Sort(m + 1, e);

	idx1 = s;
	idx2 = m + 1;
	idx_b = s;
	while ( idx1 <= m || idx2 <= e )
	{
		if ( idx2 > e || ( (idx1 <= m) && (a[idx1] < a[idx2]) ) )
		{
			printf("idx2 = %d, e = %d\n", idx2, e);
			b[idx_b++] = a[idx1++];
		}
		else b[idx_b++] = a[idx2++];
	}

	printf("[%d]\n", ++cnt);
	for (idx1 = s; idx1 <= e; idx1++)
	{
		a[idx1] = b[idx1];
		printf("%d ", a[idx1]);
	}
	printf("\n");
}
#endif






// 문제 A2: [TST] 도약
#if 0
#include <stdio.h>
#define leaf	(1010)

void Input(void);
void Merge_Sort(int s, int e);
int BS_Find_JumpMin(int s, int e, int num);
int BS_Find_JumpMax(int s, int e, int num);
void Operation(void);
void Print(void);

int N;
int Lotus[leaf];
int tmp[leaf];
int Total_Doyak;

int main(void)
{
	freopen("in.txt", "r", stdin);

	Input();
	Merge_Sort(1, N);
	Operation();
	Print();

	return 0;
}

void Input(void)
{
	int i;

	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &Lotus[i]);
	}
}

// ★★
void Merge_Sort(int s, int e)
{
	int i;
	int idx1, idx2, idxtmp;
	int m = (s + e) / 2;

	if (s >= e) return;

	Merge_Sort(s, m);
	Merge_Sort(m + 1, e);

	idx1 = s;
	idx2 = m + 1;
	idxtmp = s;
	while (idx1 <= m || idx2 <= e)
	{
		if ( (idx2 > e) || ( (idx1 <= m) && (Lotus[idx1] < Lotus[idx2]) ) )
			tmp[idxtmp++] = Lotus[idx1++];
		else tmp[idxtmp++] = Lotus[idx2++];
	}

	for (i = s; i <= e; i++) Lotus[i] = tmp[i];
}

// ★★
// num(인자로는 Lotus[j] + 2*jump1)보다 크거나 같은 것들 중에 최소값을 구함
int BS_Find_JumpMin(int s, int e, int num)
{
	int m;
	int sol = 0;

	while (s <= e)
	{
		m = (s + e) / 2;
		if (Lotus[m] <= num)
		{
			sol = m;
			s = m + 1;
		}
		else
		{
			e = m - 1;
		}
	}
	return sol;
}

// ★★
// num(인자로는 Lotus[j] + jump1이 들어감)보다 작거나 같은 것들 중에 최대값을 구함
int BS_Find_JumpMax(int s, int e, int num)
{
	int m;
	int sol = 0;

	while (s <= e)
	{
		m = (s + e) / 2;
		if ( Lotus[m] >= num )
		{
			sol = m;
			e = m - 1;
		}
		else
		{
			s = m + 1;
		}
	}
	return sol;
}

void Operation(void)
{
	int i, j;
	int jump1;
	int idx1, idx2;
	Total_Doyak = 0;

	for (i = 1; i <= N - 2; i++)
	{
		for (j = i + 1; j <= N - 1; j++)
		{
			jump1 = Lotus[j] - Lotus[i];

			// BS_Find_JumpMax함수는 Lotus[j] + jump1보다 큰 값들 중 이 값과 가장 유사한, 가까운 수
			// 또는 Lotus[j] + jump1와 같은 수의 요소번호를 리턴하는 함수! (없으면 1)
			idx1 = BS_Find_JumpMax(j + 1, N, Lotus[j] + jump1);
			if (idx1 == 0) break;

			// BS_Find_JumpMin함수는 Lotus[j] + 2 * jump1보다 큰 작은들 중 이 값과 가장 유사한, 가까운 수
			// 또는 Lotus[j] + 2 * jump1와 같은 수의 요소번호를 리턴하는 함수! (없으면 1)
			idx2 = BS_Find_JumpMin(idx1, N, Lotus[j] + 2 * jump1);
			if (idx2 == 0) continue;
			printf("Lotus[%d] = %d, Lotus[%d] = %d\n", i, Lotus[i], j, Lotus[j]);
			printf("Lotus[%d] = Min = %d\n", idx1, Lotus[idx1]);
			printf("Lotus[%d] = Max = %d\n", idx2, Lotus[idx2]);
			Total_Doyak += idx2 - idx1 + 1;
		}
	}
}

void Print(void)
{
	//int i;

	//for (i = 1; i <= N; i++)
	//{
	//	printf("%d ", Lotus[i]);
	//}
	//printf("\n");
	printf("%d\n", Total_Doyak);
}
#endif


// 이전 ver.
#if 0
#include <stdio.h>
#define MAX (1010)

void Input(void);
void Operation(void);
void Print(void);

int N;
int x[MAX];
int result;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	Operation();
	Print();

	return 0;
}


void Input(void)
{
	int i, j;
	int tmp;

	scanf("%d", &N);
	for (i = 0; i < N; i++)
	{
		scanf("%d", &x[i]);
	}
	// 버블소트 => 오름차순
	for (i = 0; i < N - 1; i++)
	{
		for (j = 0; j < N - 1 - i; j++)
		{
			if (x[j] > x[j + 1])
			{
				tmp = x[j + 1];
				x[j + 1] = x[j];
				x[j] = tmp;
			}
		}
	}
}

int Cnt_Result(int s, int e, int X)
{
	int m, cnt = 0;

	while (s <= e)
	{
		m = (s + e) / 2;
		if (x[m] < X)
		{
			s = m + 1;
			cnt = s;
		}
		else
		{
			e = m - 1;
		}
	}
	return cnt;
}

void Operation(void)
{
	int i, j, k;
	int jmp, check1, check2;
	int n = N - 1;

	for (i = 0; i < N - 2; i++)
	{
		for (j = i + 1; j < N - 1; j++)
		{
			jmp = x[j] - x[i];
			check1 = x[j] + 2 * jmp + 1;
			check2 = x[j] + jmp;
			//printf("jump1 = %d, jump2 = %d\n", check2, check1);
			result += Cnt_Result(1, n, check1) - Cnt_Result(1, n, check2);
		}
	}
}

void Print(void)
{
	printf("%d\n", result);
}
#endif






// 문제 A5: [TEST] 호수의 깊이
/*
★★★★★
일단, BFS로 당연히 접근할 수는 있음!!
하지만...

0 0 0 0 0 0 0 
0 0 0 1 0 0 0 
0 0 0 1 0 0 0
0 1 1 1 1 1 0
0 0 0 1 0 0 0
0 0 0 1 0 0 0
0 0 0 0 0 0 0

과 같은 호수가 주어졌다고 가정해보자.
나의 BFS 논리로는 1(물)에서 사방 체크를 하고, 그 곳이 1(물)이라면 나(1)에서 +1해주어서 2가 되는 것!
하지만, 저 가운데의 깊이는 3임!!!!
일반적인 테스트 케이스에서는 1, 2, 3, ... 과 같은 일정하게 깊어지는 케이스가 나올테지만,
위와 같이 반례가 분명히 존재하기 때문에!!!

잘못 접근, or 되지 않는데 계속 그 접근 방식을 유지하는 것은 위험하다!!!
★★★★★
즉, 바로 밑의 풀이는 잘못된 풀이라는 것!!!
*/
#if 0
#include <stdio.h>
#define MAX	(15)
#define INF	(99999)

typedef struct _st
{
	int y;
	int x;
}POS;
POS QUEUE[MAX * MAX * 30];

void Input(void);
void In_Queue(int yy, int xx);
POS * Out_Queue(void);
void Firt_In_Queue(void);

void Print(void);

int N;
int Pond[MAX][MAX];
int Wp, Rp;
int Visit[MAX][MAX];
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};
int result;

int main(void)
{
	Input();
	Operation();
	Print();

	return 0;
}

void In_Queue(int yy, int xx)
{
	QUEUE[Wp].y = yy;
	QUEUE[Wp++].x = xx;
}

POS * Out_Queue(void)
{
	return &(QUEUE[Rp++]);
}

void Input(void)
{
	int i, j;
	
	result = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Pond[i][j]);
			Visit[i][j] = INF;
		}
	}
}

void Firt_In_Queue(void)
{
	int i, j, k;
	int ny, nx;
	Wp = Rp = 0;

	for (i = 2; i < N; i++)
	{
		for (j = 2; j < N; j++)
		{
			for (k = 0; k < 4; k++)
			{
				ny = i + dy[k];
				nx = j + dx[k];
				if (Pond[ny][nx] == 0 && Visit[ny][nx] != 0)
				{
					In_Queue(ny, nx);
					Visit[ny][nx] = 0;
				}
			}
			
		}
	}
}

void BFS(void)
{
	int i;
	int ny, nx;
}

void Print(void)
{
	printf("%d\n", result);
}
#endif

// 본디 IDEA 문제!! 그렇기 때문에 이렇게 풀어보자!
#if 0
#include <stdio.h>
#define MAX	(15)

void Input(void);
void Operation(void);
void Print(void);

int N;
int Pond[MAX][MAX];
int result;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	Operation();
	Print();

	return 0;
}


void Input(void)
{
	int i, j;

	result = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &Pond[i][j]);
		}
	}
}

void Operation(void)
{
	int i, j;
	int dir;
	int ny, nx;
	int dy[4] = { -1, 1, 0, 0 };
	int dx[4] = { 0, 0, -1, 1 };
	int dist;
	int Min;

	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			if (Pond[i][j] == 1)
			{
				Min = 9999;
				for (dir = 0; dir < 4; dir++)
				{
					ny = i, nx = j;
					dist = 0;
					while (Pond[ny][nx] != 0)
					{
						ny += dy[dir];
						nx += dx[dir];
						if (ny < 1 || ny > N || nx < 1 || nx > N) break;
						dist++;
					}
					if (Min > dist) Min = dist;
				}
				printf("Min = %d\n", Min);
				result += Min;
			}
		}
	}
}

void Print(void)
{
	printf("%d\n", result);
}
#endif











// 문제 A6: [TST]기업투자(BASIC2)
#if 0
#include <stdio.h>
#define MONEY	(35)
#define COMPANY	(10)

void Input(void);
void DFS(int L, int remain, int profit);
void Print(void);

int N;
int K;
int Inv[MONEY][COMPANY];
int Profit_List[COMPANY];
int Max;
int cnt;

int main(void)
{
	freopen("in.txt", "r", stdin);
	Input();
	DFS(1, N, 0);
	Print();

	return 0;
}


void Input(void)
{
	int i, j;

	Max = 0;
	scanf("%d %d", &N, &K);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &Inv[i][0]);
		for (j = 1; j <= K; j++)
		{
			scanf("%d", &Inv[i][j]);
		}
	}
}

void DFS(int L, int remain, int profit)
{
	int i, flag = 0;
	int j;

	//printf("[%d] L = %d, remain = %d, profit = %d\n", ++cnt, L, remain, profit);

	if (remain == 0) flag = 1;
	if (L > K || flag)
	{
		//printf("Profit_List\n");
		//for (j = 1; j <= K; j++) printf("%d ", Profit_List[j]);
		//printf("\n");
		if (Max < profit) Max = profit;
		//printf("Max = %d\n", Max);
		return;
	}

	for (i = 0; i <= remain; i++)
	{
		Profit_List[L] = Inv[i][L];
		//printf("%d\n", Inv[i][L]);
		DFS(L + 1, remain - i, profit + Inv[i][L]);
		Profit_List[L] = 0;
	}
}

void Print(void)
{
	//int i, j;
	//for (i = 1; i <= N; i++)
	//{
	//	for (j = 0; j <= K; j++)
	//	{
	//		printf("%d ", Inv[i][j]);
	//	}
	//	printf("\n");
	//}

	printf("%d\n", Max);
}
#endif





// 문제 A3: [TST]예산	=>		★ 이진탐색으로 못 풀겠다!!!!!!! ★
#if 01
#include <stdio.h>
#define TOTAL_CITY	(10010)

void Input(void);
void Merge_Sort(int s, int e);
void Get_Sum_to_i(void);
void Operation(void);
void Print(void);

int N;			// 지방의 수 (3 ~ 100,000)
int M;			// 총 예산 (N ~ 10억)
int Request[TOTAL_CITY];
int tmp[TOTAL_CITY];
int Input_sum;
int result;

int main(void)
{

	freopen("in.txt", "r", stdin);

	Input();
	Merge_Sort(1, N);

	if (Input_sum <= M)
	{
		printf("%d\n", Request[N]);
		return 0;
	}

	Get_Sum_to_i();
	Operation();
	Print();

	return 0;
}


void Input(void)
{
	int i;

	Input_sum = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &Request[i]);

		Input_sum += Request[i];
	}
	scanf("%d", &M);
}

void Merge_Sort(int s, int e)
{
	int idx1, idx2, idxtmp;
	int m = (s + e) / 2;

	if ( s >= e ) return;

	Merge_Sort(s, m);
	Merge_Sort(m + 1, e);

	idx1 = s;
	idx2 = m + 1;
	idxtmp = s;
	while (idx1 <= m || idx2 <= e)
	{
		if ( idx2 > e || ( (idx1 <= m) && (Request[idx1] < Request[idx2]) ) )
		{
			tmp[idxtmp++] = Request[idx1++];
		}
		else tmp[idxtmp++] = Request[idx2++];
	}

	for (idx1 = s; idx1 <= e; idx1++) Request[idx1] = tmp[idx1];
}

void Get_Sum_to_i(void)
{
	int i;

	tmp[1] = Request[1];
	for (i = 2; i <= N; i++)
	{
		tmp[i] = tmp[i - 1] + Request[i];
	}
}

void Operation(void)
{
	
}

void Print(void)
{
	//int i;

	//for (i = 1; i <= N; i++) printf("%d ", Request[i]);
	printf("%d\n", result);
}
#endif


// 문제 A3: [TST]예산	=>		★ 다른 논리로 풀자..! ★
#if 0
#include <stdio.h>
#define TOTAL_CITY	(10010)

void Input(void);
void Merge_Sort(int s, int e);
void Operation(void);
void Print(void);

int N;					// 지방의 수 (3 ~ 100,000)
int M;					// 총 예산 (N ~ 10억)
int Request[TOTAL_CITY];
int tmp[TOTAL_CITY];	// 소트할 때 사용하고, 나중에 다시 한 번 더 사용!!
int Input_sum;
int result;

int main(void)
{

	//freopen("in.txt", "r", stdin);

	Input();
	Merge_Sort(1, N);

	if (Input_sum <= M)
	{
		printf("%d\n", Request[N]);
		return 0;
	}

	Operation();
	Print();

	return 0;
}


void Input(void)
{
	int i;

	Input_sum = 0;
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		scanf("%d", &Request[i]);

		Input_sum += Request[i];
	}
	scanf("%d", &M);
}

void Merge_Sort(int s, int e)
{
	int idx1, idx2, idxtmp;
	int m = (s + e) / 2;

	if (s >= e) return;

	Merge_Sort(s, m);
	Merge_Sort(m + 1, e);

	idx1 = s;
	idx2 = m + 1;
	idxtmp = s;
	while (idx1 <= m || idx2 <= e)
	{
		if (idx2 > e || ((idx1 <= m) && (Request[idx1] < Request[idx2])))
		{
			tmp[idxtmp++] = Request[idx1++];
		}
		else tmp[idxtmp++] = Request[idx2++];
	}

	for (idx1 = s; idx1 <= e; idx1++) Request[idx1] = tmp[idx1];
}

void Operation(void)
{
	int i, sum, add = 0;

	tmp[1] = Request[1];
	for (i = 2; i <= N; i++)
	{
		tmp[i] = tmp[i - 1] + Request[i];
	}		// tmp 배열 : tmp[i]는 Request[1] ~ Request[i]까지의 함 (오름차순 정렬 해놓음!!)


	for (i = 1; i < N; i++)
	{
		if ( tmp[i] + (N - i) * Request[i + 1] > M )
		{
			sum = tmp[i] + (N - i) * Request[i + 1];
			result = Request[i + 1];
			break;
		}
	}

	while (sum > M)
	{
		sum -= (N - i);
		add++;
	}

	result -= add;
}

void Print(void)
{
	//int i;

	//for (i = 1; i <= N; i++) printf("%d ", Request[i]);

	printf("%d\n",  result);
}
#endif
