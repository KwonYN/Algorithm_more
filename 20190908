//#pragma warning(disable :4996)

#include <stdlib.h>

// 문제 C9: [TST] 먼 목초지
#if 0
#include <stdio.h>
#define MAX     (32)
#define INF     (987654321)

typedef struct
{
        int y, x;
}NODE;
NODE Q[MAX * MAX * 20];

void Input(void);
void InQ(int yy, int xx);
NODE * OutQ(void);
void Operation(void);
void FF_BFS(int sy, int sx);
int Find_Max(void);
void Init_Visit(void);
void Print(void);

int N, A, B;
int Mokcho[MAX][MAX];
int Visit[MAX][MAX];
int Wp, Rp;
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};
int Max_Time;

int main(void)
{
        Input();
        Operation();
        Print();

        return 0;
}

void Input(void)
{
        int i, j;
        char tmp[MAX];

        scanf("%d %d %d", &N, &A, &B);
        for(i = 1; i <= N; i++)
        {
                scanf("%s", tmp);
                for(j = 1; j <= N; j++)
                {
                        if(tmp[j - 1] == '(') Mokcho[i][j] = 1;
                        else Mokcho[i][j] = 9;
                }
        }
}

void InQ(int yy, int xx)
{
        Q[Wp].y = yy;
        Q[Wp++].x = xx;
}

NODE * OutQ(void)
{
        return &(Q[Rp++]);
}

void FF_BFS(int sy, int sx)
{
        NODE * out = (NODE *)0x0;
        int i;
        int ny, nx;
        int check;

        Wp = Rp = 0;
        InQ(sy, sx);
        Visit[sy][sx] = 0;

        while(Wp > Rp)
        {
                out = OutQ();
                sy = out->y;
                sx = out->x;
                for(i = 0; i < 4; i++)
                {
                        ny = sy + dy[i];
                        nx = sx + dx[i];
                        if(ny < 1 || ny > N || nx < 1 || nx > N) continue;
                        if(Mokcho[sy][sx] == Mokcho[ny][nx]) check = Visit[sy][sx] + A;
                        else check = Visit[sy][sx] + B;
                        if(Visit[ny][nx] > check)
                        {
                                Visit[ny][nx] = check;
                                InQ(ny, nx);
                        }
                }
        }
}

int Find_Max(void)
{
        int i, j;
        int max = 0;

        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        if(max < Visit[i][j]) max = Visit[i][j];
                }
        }

        return max;
}

void Operation(void)
{
        int i, j;
        int max;

        Max_Time = 0;
        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        Init_Visit();
                        FF_BFS(i, j);
                        max = Find_Max();
                        if(Max_Time < max) Max_Time = max;
                }
        }
}

void Init_Visit(void)
{
        int i, j;

        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        Visit[i][j] = INF;
                }
        }
}

void Print(void)
{
//        int i, j;

//        for(i = 1; i <= N; i++)
//        {
//                for(j = 1; j <= N; j++)
//                {
//                        printf("%d ", Mokcho[i][j]);
//                }
//                printf("\n");
//        }

        printf("%d\n", Max_Time);
}
#endif




// 문제 D0: [TST]월드컵      =>      ★★DFS로 풀고 있었음!!다시 보기!★★
#if 0
#include <stdio.h>

void Input(void);
void DFS(int L, int idx);
int Check_Possibility(void);
void Print(void);
void Init(void);

int Worldcup[7][4];
int List[7][7];
int flag;

int main(void)
{
        int i;

        for(i = 1; i <= 4; i++)
        {
                Input();
                DFS(1, 1);
                Print();
                Init();
        }
        printf("\n");

        return 0;
}

void Input(void)
{
        int i, j;

        flag = 0;
        for(i = 1; i <= 6; i++)
        {
                for(j = 1; j <= 3; j++)
                {
                        scanf("%d", &Worldcup[i][j]);
                }
        }
}

void DFS(int L, int idx)
{
        int i, r, c;

        if(flag) return;
        if(L > 15)
        {
                for(r = 1; r <= 6; r++)
                {
                        for(c = 1; c <= 6; c++)
                        {
                                printf("%3d", List[r][c]);
                        }
                        printf("\n");
                }
                printf("\n");

                if(Check_Possibility() == 1)
                {
                        flag = 1;
                }
                return;
        }

        for(i = ;)

}

int Check_Possibility(void)
{
        int i, j;
        int vic, dra, los;

        for(i = 1; i <= 6; i++)
        {
                vic = dra = los = 0;
                for(j = 1; j <= 6; j++)
                {
                        if(i == j) continue;
                        if(List[i][j] == 3) vic++;
                        else if(List[i][j] == 2) dra++;
                        else los++;
                }
                if(Worldcup[i][1] == vic && Worldcup[i][2] == dra && Worldcup[i][3] == los) continue;
                else return 0;
        }
        return 1;
}

void Init(void)
{
        int i, j;

        for(i = 1; i <= 6; i++)
        {
                for(j = 1; j <= 6; j++)
                {
                        List[i][j] = 0;
                }
        }
}

void Print(void)
{
        printf("%d ", flag);
}
#endif






// 이차원 배열과 연산
#if 0
#include <stdio.h>
#define MAX     (201)
#define MMAX    (101)

typedef struct
{
        int num;
        int cnt;
}NODE;
NODE check[MAX];

void Input(void);
void Init_Check(void);

void Print(void);

int A[MAX][MAX];
//int ARR[MAX][MAX];
//int check[MMAX];
int R, C, K;
int count;

int main(void)
{
        Input();

        Print();

        return 0;
}

void Input(void)
{
        int i, j;

        scanf("%d %d %d", &R, &C, &K);
        for(i = 1; i <= 3; i++)
        {
                for(j = 1; j <= 3; j++)
                {
                        scanf("%d", &A[i][j]);
                }
        }
}

void Init_Check(int max)
{
        int i;

        for(i = 1; i <= max; i++)
        {
                check[i].num = i;
                check[i].cnt = 0;
        }
}

void Operation(void)
{
        int i, j, k;
        int row = 3;
        int col = 3;
        int max;
        int max_r, max_c;

        count = 0;
        while(A[R][C] != K)
        {
                max = 0;
                // R연산
                if(row >= col)
                {
                        for(i = 1; i <= row; i++)
                        {
                                for(j = 1; j <= col; j++)
                                {
                                        check[ A[i][j] ].cnt++;
                                        if(max < A[i][j]) max = A[i][j];
                                }
                                // 정렬해주는 함수! (많이 들어간 순 -> 숫자 오름차순 순)
                                Sort(max, i);
                                Init_Check(max);
                        }
                }
                // C연산
                else
                {
                        for(j = 1; j <= col; j++)
                        {
                                for(i = 1; i <= row; i++)
                                {
                                        check[A[i][j]]++;
                                        if(max < A[i][j]) max = A[i][j];
                                }
                        }
                }

                // check배열 초기화 해주어야 함!!

                row = max_r;
                col = max_c;
                count++;
                max_r = max_c = 0;
        }

}

void Sort(int max, int i)
{
        int r, c, k;
        NODE tmp = 0;

        for(r = 1; r < max; r++)
        {
                for(c = r + 1; c <= max; c++)
                {
                        if( (check[r].cnt > check[c].cnt) || ( (check[r].cnt == check[c].cnt) && (check[r].num < check[c].num) ) )
                        {
                                tmp = check[r];
                                check[r] = check[c];
                                check[c] = tmp;
                        }
                }
        }

        for(k = 1; ) A[i][k] =
}

void Print(void)
{
        printf("%d\n", count);
}
#endif



// 연구소 3 : 토마토와 비슷!!
#if 0
#include <stdio.h>
#define MAX     (52)

typedef struct
{
        int y, x;
}NODE;
NODE Virus[MAX * MAX];
NODE List[11];
NODE Q[MAX * MAX * 10];

void Input(void);
void InQ(int yy, int xx);
NODE * OutQ(void);
void Make_Combination(int L, int s_idx);
int BFS(void);
void Print(void);
void Init_Visit(void);

int N, M;
int Lab[MAX][MAX];
int Wp, Rp;
int Visit[MAX][MAX];    // 초기화 필요!!!
int virus_no;
int Min_Time;
int chk_0;
int chk_2;
int Min_Time_tmp;
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

int main(void)
{
        Input();
        if(chk_0 == 0)
        {
                printf("%d\n", chk_0);
                return 0;
        }
        Make_Combination(1, 1);
        Print();

        return 0;
}

void Input(void)
{
        int i, j;

        Min_Time = 987654321;
        virus_no = 1;
        scanf("%d %d", &N, &M);
        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        scanf("%d", &Lab[i][j]);
                        if(Lab[i][j] == 0) chk_0++;
                        else if(Lab[i][j] == 1) Lab[i][j] = 3;
                        else if(Lab[i][j] == 2)
                        {
                                Virus[virus_no].y = i;
                                Virus[virus_no++].x = j;
                                //printf("virus_no = %d\n", virus_no);
                                chk_2++;
                        }
                }
        }
}

void InQ(int yy, int xx)
{
        Q[Wp].y = yy;
        Q[Wp++].x = xx;
}

NODE * OutQ(void)
{
        return &(Q[Rp++]);
}

int BFS(void)
{
        NODE * out = (NODE *)0x0;
        int i;
        int ny, nx;
        int sy, sx;
        int check;
        int chk = chk_0 + chk_2 - M;
        int max = 0;

        while(Wp > Rp)
        {
                out = OutQ();
                sy = out->y;
                sx = out->x;
                for(i = 0; i < 4; i++)
                {
                        ny = sy + dy[i];
                        nx = sx + dx[i];
                        if(ny < 1 || ny > N || nx < 1 || nx > N) continue;
                        check = Visit[sy][sx] + 1;
                        if( (Lab[ny][nx] <= 2) && (Visit[ny][nx] > check) )
                        {
                                InQ(ny, nx);
                                Visit[ny][nx] = check;
                                if( (Lab[ny][nx] == 0) && (max < check))
                                {
                                        max = check;
                                }
                                if(--chk == 0) return max;
                        }
                }
        }

        return 987654320;
}

void Make_Combination(int L, int s_idx)
{
        int i, j;//, k, l;

        if(L > M)
        {
                //for(k = 1; k < L; k++)
                //{
                //        printf("%d,%d   ", List[k].y, List[k].x);
                //}
                //printf("\n");
                Init_Visit();
                Wp = Rp = 0;
                for(j = 1; j < L; j++)
                {
                        InQ(List[j].y, List[j].x);
                        Visit[List[j].y][List[j].x] = 0;
                }
                Min_Time_tmp = BFS();
                //printf("Min_Time_tmp = %d\n", Min_Time_tmp);
                //for(k = 1; k <= N; k++)
                //{
                //        for(l = 1; l <= N; l++)
                //        {
                //                printf("%10d", Visit[k][l]);
                //        }
                //        printf("\n");
                //}
                //printf("\n");
                if(Min_Time > Min_Time_tmp) Min_Time = Min_Time_tmp;
                return;
        }

        for(i = s_idx; i < virus_no - M + L; i++)
        {
                List[L].y = Virus[i].y;
                List[L].x = Virus[i].x;

                Make_Combination(L + 1, i + 1);

                List[L].y = 0;
                List[L].x = 0;
        }
}

void Init_Visit(void)
{
        int i, j;

        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        Visit[i][j] = 987654321;
                }
        }
}

void Print(void)
{
        if(Min_Time == 987654320) printf("-1\n");
        else printf("%d\n", Min_Time);
}
#endif




// 문제 C4: [TST]N QUEEN
#if 0
#include <stdio.h>
#define MAX     (15)

typedef struct
{
        int y, x;
}NODE;
NODE List[MAX];

void Input(void);
void DFS(int L);
void Check_8(int r, int c, int num);
void Print_List(void);
void Print(void);

int N;
int Board[MAX][MAX];
int dy[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dx[8] = {-1, 0, 1, 1, 1, 0, -1, -1};        // 8방 체크
int check0[MAX];
int check1[2 * MAX];    //              / 체크
int check2[2 * MAX];    //              \ 체크
int count;
int chk[MAX];

int main(void)
{
        Input();
        DFS(1);
        Print();

        return 0;
}

void Input(void)
{
        int i, j;

        count = 0;
        scanf("%d", &N);
        for(i = 1; i <= N; i++)
        {
                for(j = 1; j <= N; j++)
                {
                        Board[i][j] = 0;
                }
        }
}

void DFS(int L)
{
        int i;

        if(L > N)
        {
                count++;
                //printf("%d : ", count);
                //Print_List();
                return;
        }

        for(i = 1; i <= N; i++)
        {
                if( Board[L][i] == 0 && check0[i] == 0 && check1[L + i] == 0 && check2[i - L + N] == 0 )
                {
                        check0[i] = 1;
                        check1[L + i] = 1;
                        check2[i - L + N] = 1;
                        Check_8(L, i, 1);
                        List[L].y = L;
                        List[L].x = i;

                        DFS(L + 1);

                        check0[i] = 0;
                        check1[L + i] = 0;
                        check2[i - L + N] = 0;
                        Check_8(L, i, 0);
                        List[L].y = 0;
                        List[L].x = 0;
                }

        }
}

void Check_8(int r, int c, int num)
{
        int i, ny, nx;

        for(i = 0; i < 8; i++)
        {
                ny = r + dy[i];
                nx = c + dx[i];
                if(ny < 1 || ny > N || nx < 1 || nx > N) continue;
                Board[ny][nx] = num;
        }
}

void Print_List(void)
{
        int i;

        for(i = 1; i <= N; i++)
        {
                printf("y = %d, x = %d\n", List[i].y, List[i].x);
        }
        printf("\n\n");
}

void Print(void)
{
        printf("%d\n", count);
}
#endif




// 문제 C2: [TEST]전하량
#if 0
#include <stdio.h>

void Input(void);

void Print(void);

int main(void)
{
        Input();

        Print();

        return 0;
}

void Input(void)
{

}

void Print(void)
{

}
#endif
